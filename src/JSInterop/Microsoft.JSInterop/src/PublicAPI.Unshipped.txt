#nullable enable
Microsoft.JSInterop.IJSInProcessRuntime.GetValue<TValue>(string! identifier) -> TValue
Microsoft.JSInterop.IJSInProcessRuntime.InvokeNew(string! identifier, object?[]? args) -> Microsoft.JSInterop.IJSObjectReference!
Microsoft.JSInterop.IJSInProcessRuntime.SetValue<TValue>(string! identifier, TValue value) -> void
Microsoft.JSInterop.IJSObjectReference.GetValueAsync<TValue>() -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.IJSObjectReference.GetValueAsync<TValue>(string! identifier) -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.IJSObjectReference.GetValueAsync<TValue>(string! identifier, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.IJSObjectReference.GetValueAsync<TValue>(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.IJSObjectReference.InvokeNewAsync(string! identifier, object?[]? args) -> System.Threading.Tasks.ValueTask<Microsoft.JSInterop.IJSObjectReference!>
Microsoft.JSInterop.IJSObjectReference.InvokeNewAsync(string! identifier, System.Threading.CancellationToken cancellationToken, object?[]? args) -> System.Threading.Tasks.ValueTask<Microsoft.JSInterop.IJSObjectReference!>
Microsoft.JSInterop.IJSObjectReference.SetValueAsync<TValue>(string! identifier, TValue value) -> System.Threading.Tasks.ValueTask
Microsoft.JSInterop.IJSObjectReference.SetValueAsync<TValue>(string! identifier, TValue value, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
Microsoft.JSInterop.IJSRuntime.GetValueAsync<TValue>(string! identifier) -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.IJSRuntime.GetValueAsync<TValue>(string! identifier, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.IJSRuntime.InvokeNewAsync(string! identifier, object?[]? args) -> System.Threading.Tasks.ValueTask<Microsoft.JSInterop.IJSObjectReference!>
Microsoft.JSInterop.IJSRuntime.InvokeNewAsync(string! identifier, System.Threading.CancellationToken cancellationToken, object?[]? args) -> System.Threading.Tasks.ValueTask<Microsoft.JSInterop.IJSObjectReference!>
Microsoft.JSInterop.IJSRuntime.SetValueAsync<TValue>(string! identifier, TValue value) -> System.Threading.Tasks.ValueTask
Microsoft.JSInterop.IJSRuntime.SetValueAsync<TValue>(string! identifier, TValue value, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
Microsoft.JSInterop.Implementation.JSObjectReference.GetValueAsync<TValue>() -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.Implementation.JSObjectReference.GetValueAsync<TValue>(string! identifier) -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.Implementation.JSObjectReference.GetValueAsync<TValue>(string! identifier, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.Implementation.JSObjectReference.GetValueAsync<TValue>(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.Implementation.JSObjectReference.InvokeNewAsync(string! identifier, object?[]? args) -> System.Threading.Tasks.ValueTask<Microsoft.JSInterop.IJSObjectReference!>
Microsoft.JSInterop.Implementation.JSObjectReference.InvokeNewAsync(string! identifier, System.Threading.CancellationToken cancellationToken, object?[]? args) -> System.Threading.Tasks.ValueTask<Microsoft.JSInterop.IJSObjectReference!>
Microsoft.JSInterop.Implementation.JSObjectReference.SetValueAsync<TValue>(string! identifier, TValue value) -> System.Threading.Tasks.ValueTask
Microsoft.JSInterop.Implementation.JSObjectReference.SetValueAsync<TValue>(string! identifier, TValue value, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
Microsoft.JSInterop.Infrastructure.JSAsyncInvocationInfo
Microsoft.JSInterop.Infrastructure.JSAsyncInvocationInfo.ArgsJson.get -> string?
Microsoft.JSInterop.Infrastructure.JSAsyncInvocationInfo.ArgsJson.set -> void
Microsoft.JSInterop.Infrastructure.JSAsyncInvocationInfo.CallType.get -> Microsoft.JSInterop.Infrastructure.JSCallType
Microsoft.JSInterop.Infrastructure.JSAsyncInvocationInfo.CallType.set -> void
Microsoft.JSInterop.Infrastructure.JSAsyncInvocationInfo.Identifier.get -> string!
Microsoft.JSInterop.Infrastructure.JSAsyncInvocationInfo.Identifier.set -> void
Microsoft.JSInterop.Infrastructure.JSAsyncInvocationInfo.JSAsyncInvocationInfo() -> void
Microsoft.JSInterop.Infrastructure.JSAsyncInvocationInfo.ResultType.get -> Microsoft.JSInterop.JSCallResultType
Microsoft.JSInterop.Infrastructure.JSAsyncInvocationInfo.ResultType.set -> void
Microsoft.JSInterop.Infrastructure.JSAsyncInvocationInfo.TargetInstanceId.get -> long
Microsoft.JSInterop.Infrastructure.JSAsyncInvocationInfo.TargetInstanceId.set -> void
Microsoft.JSInterop.Infrastructure.JSAsyncInvocationInfo.TaskId.get -> long
Microsoft.JSInterop.Infrastructure.JSAsyncInvocationInfo.TaskId.set -> void
Microsoft.JSInterop.Infrastructure.JSCallType
Microsoft.JSInterop.Infrastructure.JSCallType.FunctionCall = 1 -> Microsoft.JSInterop.Infrastructure.JSCallType
Microsoft.JSInterop.Infrastructure.JSCallType.GetValue = 3 -> Microsoft.JSInterop.Infrastructure.JSCallType
Microsoft.JSInterop.Infrastructure.JSCallType.NewCall = 2 -> Microsoft.JSInterop.Infrastructure.JSCallType
Microsoft.JSInterop.Infrastructure.JSCallType.SetValue = 4 -> Microsoft.JSInterop.Infrastructure.JSCallType
Microsoft.JSInterop.JSInProcessRuntime.GetValue<TValue>(string! identifier) -> TValue
Microsoft.JSInterop.JSInProcessRuntime.InvokeNew(string! identifier, object?[]? args) -> Microsoft.JSInterop.IJSObjectReference!
Microsoft.JSInterop.JSInProcessRuntime.SetValue<TValue>(string! identifier, TValue value) -> void
Microsoft.JSInterop.JSRuntime.GetValueAsync<TValue>(string! identifier) -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.JSRuntime.GetValueAsync<TValue>(string! identifier, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<TValue>
Microsoft.JSInterop.JSRuntime.InvokeNewAsync(string! identifier, object?[]? args) -> System.Threading.Tasks.ValueTask<Microsoft.JSInterop.IJSObjectReference!>
Microsoft.JSInterop.JSRuntime.InvokeNewAsync(string! identifier, System.Threading.CancellationToken cancellationToken, object?[]? args) -> System.Threading.Tasks.ValueTask<Microsoft.JSInterop.IJSObjectReference!>
Microsoft.JSInterop.JSRuntime.SetValueAsync<TValue>(string! identifier, TValue value) -> System.Threading.Tasks.ValueTask
Microsoft.JSInterop.JSRuntime.SetValueAsync<TValue>(string! identifier, TValue value, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask
